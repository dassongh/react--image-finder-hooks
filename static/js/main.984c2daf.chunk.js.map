{"version":3,"sources":["components/SearchBar.jsx","components/ImageGalleryItem.jsx","components/ImageGallery.jsx","components/Button.jsx","components/Modal.jsx","services/PixabayApi.js","App.js","index.js"],"names":["SearchBar","onSubmit","useState","input","setInput","className","e","preventDefault","toast","target","reset","type","autoComplete","autoFocus","placeholder","onChange","value","ImageGalleryItem","src","largeSrc","alt","clickHandler","onClick","ImageGallery","images","map","id","webformatURL","largeImageURL","tags","Button","text","Modal","url","apiKey","searchValue","page","a","fetch","response","json","App","searchQuery","setSearchQuery","setPage","result","setResult","isPending","setIsPending","modalAtributes","setModalAtributes","useEffect","api","then","total","warn","s","hits","catch","error","console","log","finally","window","removeEventListener","closeModalMethods","currentTarget","code","addEventListener","length","color","height","width","autoClose","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.984c2daf.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport default function SearchBar({ onSubmit }) {\r\n  const [input, setInput] = useState('');\r\n\r\n  const formHandler = e => {\r\n    e.preventDefault();\r\n\r\n    if (input === '') return toast('Type what you would like to find');\r\n\r\n    onSubmit(input);\r\n    setInput('');\r\n    e.target.reset();\r\n  };\r\n\r\n  return (\r\n    <header className=\"Searchbar\">\r\n      <form className=\"SearchForm\" onSubmit={formHandler}>\r\n        <button type=\"submit\" className=\"SearchForm-button\">\r\n          <span className=\"SearchForm-button-label\">Search</span>\r\n        </button>\r\n        <input\r\n          className=\"SearchForm-input\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Search images and photos\"\r\n          onChange={e => setInput(e.target.value)}\r\n        />\r\n      </form>\r\n    </header>\r\n  );\r\n}\r\n\r\nSearchBar.propTypes = {\r\n  onSubmit: PropTypes.func,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nexport default function ImageGalleryItem({ src, largeSrc, alt, clickHandler }) {\r\n  return (\r\n    <li className=\"ImageGalleryItem\" onClick={() => clickHandler(largeSrc, alt)}>\r\n      <img src={src} alt={alt} className=\"ImageGalleryItem-image\" />\r\n    </li>\r\n  );\r\n}\r\n\r\nImageGalleryItem.propTypes = {\r\n  alt: PropTypes.string,\r\n  handler: PropTypes.func,\r\n  largeSrc: PropTypes.string,\r\n  src: PropTypes.string,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport ImageGalleryItem from './ImageGalleryItem';\r\n\r\nexport default function ImageGallery({ images, clickHandler }) {\r\n  return (\r\n    <ul className=\"ImageGallery\">\r\n      {images.map(({ id, webformatURL, largeImageURL, tags }) => {\r\n        return (\r\n          <ImageGalleryItem\r\n            key={id}\r\n            src={webformatURL}\r\n            largeSrc={largeImageURL}\r\n            alt={tags}\r\n            clickHandler={clickHandler}\r\n          />\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nImageGallery.propTypes = {\r\n  images: PropTypes.array,\r\n  handler: PropTypes.func,\r\n};\r\n","import PropTypes from 'prop-types';\r\nexport default function Button({ text, onClick }) {\r\n  return (\r\n    <button type=\"button\" className=\"Button\" onClick={onClick}>\r\n      {text}\r\n    </button>\r\n  );\r\n}\r\n\r\nButton.propTypes = {\r\n  onClick: PropTypes.func,\r\n  text: PropTypes.string,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nexport default function Modal({ url, alt, onClick }) {\r\n  return (\r\n    <div className=\"Overlay\" onClick={onClick}>\r\n      <div className=\"Modal\">\r\n        <img src={url} alt={alt} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nModal.propTypes = {\r\n  alt: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n  url: PropTypes.string,\r\n};\r\n","const apiKey = '23951184-b06d9454dd7ae17cb77deccea';\r\n\r\nexport default async function api(searchValue, page) {\r\n  const response = await fetch(\r\n    `https://pixabay.com/api/?q=${searchValue}&page=${page}&key=${apiKey}&image_type=photo&orientation=horizontal&per_page=12`,\r\n  );\r\n  return await response.json();\r\n}\r\n","import SearchBar from './components/SearchBar';\nimport ImageGallery from './components/ImageGallery';\nimport Button from './components/Button';\nimport Modal from './components/Modal';\nimport api from './services/PixabayApi';\nimport { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport Loader from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\nfunction App() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [page, setPage] = useState(1);\n  const [result, setResult] = useState([]);\n  const [isPending, setIsPending] = useState(false);\n  const [modalAtributes, setModalAtributes] = useState([]);\n\n  const searchBarHandler = value => {\n    setSearchQuery(value);\n    setResult([]);\n    setPage(1);\n  };\n\n  useEffect(() => {\n    if (searchQuery === '') return;\n\n    setIsPending(true);\n\n    api(searchQuery, page)\n      .then(response => {\n        if (response.total === 0) toast.warn('Could not find images with that name');\n\n        setResult(s => {\n          return [...s, ...response.hits];\n        });\n      })\n      .catch(error => console.log(error))\n      .finally(() => setIsPending(false));\n\n    return () => {\n      window.removeEventListener('keydown', closeModalMethods);\n    };\n  }, [searchQuery, page]);\n\n  const openModalHandler = (url, tags) => {\n    setModalAtributes([url, tags]);\n    window.addEventListener('keydown', closeModalMethods);\n  };\n\n  const closeModalMethods = e => {\n    if (e.currentTarget === e.target) setModalAtributes([]);\n    if (e.code === 'Escape') setModalAtributes([]);\n    window.removeEventListener('keydown', closeModalMethods);\n  };\n\n  return (\n    <>\n      <SearchBar onSubmit={searchBarHandler} />\n      <ImageGallery images={result} clickHandler={openModalHandler} />\n\n      {result.length > 0 && <Button text={'Load more'} onClick={() => setPage(s => s + 1)} />}\n\n      {isPending && <Loader type=\"TailSpin\" color=\"#00BFFF\" height={80} width={80} className=\"Loader\" />}\n\n      {modalAtributes.length > 0 && (\n        <Modal url={modalAtributes[0]} alt={modalAtributes[1]} onClick={closeModalMethods} />\n      )}\n\n      <ToastContainer autoClose={2000} />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}